AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: RAG Application Infrastructure

Parameters:
  KnowledgeBaseId:
    Type: String
    Default: SAZ2XA7OUY
    Description: ID of the existing Bedrock Knowledge Base
  AccountId:
    Type: String
    Description: AWS Account ID
  KnowledgeBaseBucket:
    Type: String
    Default: arn:aws:s3:::open-search-service
    Description: S3 bucket ARN for the knowledge base
  StackName:
    Type: String
    Description: Stack Name

Resources:
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${StackName}-common-layer"
      Description: Common utilities and services for all Lambda functions
      ContentUri: ./layers/common
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${StackName}-dependencies-layer"
      Description: Dependencies layer for the Bedrock RAG project
      ContentUri: ./layers/dependencies
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete

  QueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-query-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/query
      Timeout: 29
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AccountId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /docs
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:RetrieveAndGenerate
                - bedrock:Retrieve
                - bedrock:InvokeModel
                - bedrock:GetInferenceProfile
              Resource: "*"

  QueryLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-query-lambda"
      RetentionInDays: 7

  ListDataSourcesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-list-data-sources-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/listDataSources
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /data-sources
            Method: get
            RestApiId: !Ref KnowledgeBaseAPI

  ListDataSourcesLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-list-data-sources-lambda"
      RetentionInDays: 7

  CreateChatBotLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-create-chat-bot-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/createChatBot
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Layers:
        - !Ref CommonLayer
        - !Ref DependenciesLayer
      Environment:
        Variables:
          NODE_PATH: "/opt/nodejs:/opt/nodejs/node_modules:/opt/common:/opt/dependencies"
          CHATBOT_TABLE_NAME: !Ref ChatbotTable
          USER_TABLE_NAME: !Ref UserDetailsTable
          USER_CHATBOT_TABLE_NAME: !Ref UserChatBotTable
          KNOWLEDGE_BASE_ROLE_ARN: "arn:aws:iam::905418372486:role/service-role/AmazonBedrockExecutionRoleForKnowledgeBase_9umgz"
          EMBEDDING_MODEL_ARN: "arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /chatbot
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI

  CreateChatBotLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-create-chat-bot-lambda"
      RetentionInDays: 7

  UserSignUpLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-user-sign-up-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/userSignUp
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Layers:
        - !Ref CommonLayer
        - !Ref DependenciesLayer
      Environment:
        Variables:
          NODE_PATH: "/opt/nodejs:/opt/nodejs/node_modules:/opt/common:/opt/dependencies"
          USERS_TABLE_NAME: !Ref UserDetailsTable
          KNOWLEDGE_BASE_ROLE_ARN: "arn:aws:iam::905418372486:role/service-role/AmazonBedrockExecutionRoleForKnowledgeBase_9umgz"
          EMBEDDING_MODEL_ARN: "arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0"
          S3_BUCKET_NAME: "open-search-service"
          INTERMEDIATE_BUCKET_NAME: "intermediate-open-service"
          OPEN_SEARCH_SERVICE_COLLECTION_ID: "0zvm36wbjq6vn7yjsz44"
          KNOWLEDGE_BASE_TABLE_NAME: !Ref KnowledgeBaseTable
          AWS_ACCOUNT_ID: !Ref AccountId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user-sign-up
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI

  UserSignUpLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-user-sign-up-lambda"
      RetentionInDays: 7

  GetAllChatBotsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-get-all-chatbots-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/getAllChatBots
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Layers:
        - !Ref CommonLayer
        - !Ref DependenciesLayer
      Environment:
        Variables:
          NODE_PATH: "/opt/nodejs:/opt/nodejs/node_modules:/opt/common:/opt/dependencies"
          CHATBOT_TABLE_NAME: !Ref ChatbotTable
          USER_TABLE_NAME: !Ref UserDetailsTable
          USER_CHATBOT_TABLE_NAME: !Ref UserChatBotTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /chatbots
            Method: get
            RestApiId: !Ref KnowledgeBaseAPI

  GetAllChatBotsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-get-all-chatbots-lambda"
      RetentionInDays: 7

  GenerateSignedUrlLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-generate-signed-url-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/generateSignedUrl
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Layers:
        - !Ref CommonLayer
        - !Ref DependenciesLayer
      Environment:
        Variables:
          NODE_PATH: "/opt/nodejs:/opt/nodejs/node_modules:/opt/common:/opt/dependencies"
          BUCKET_NAME: "open-search-service"
          CHATBOT_TABLE_NAME: !Ref ChatbotTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /generate-signed-url
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI

  GenerateSignedUrlLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-generate-signed-url-lambda"
      RetentionInDays: 7

  StartIngestionLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-start-ingestion-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/startIngestion
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Layers:
        - !Ref CommonLayer
        - !Ref DependenciesLayer
      Environment:
        Variables:
          NODE_PATH: "/opt/nodejs:/opt/nodejs/node_modules:/opt/common:/opt/dependencies"
          USER_TABLE_NAME: !Ref UserDetailsTable
          USER_CHATBOT_TABLE_NAME: !Ref UserChatBotTable
          KNOWLEDGE_BASE_TABLE_NAME: !Ref KnowledgeBaseTable
          CHATBOT_TABLE_NAME: !Ref ChatbotTable
          INGESTION_JOB_TABLE_NAME: !Ref IngestionJobTable
          BEDROCK_MODEL_ARN: "arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0"
          S3_BUCKET_NAME: "open-search-service"
          AWS_ACCOUNT_ID: !Ref AccountId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /ingest
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI

  StartIngestionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-start-ingestion-lambda"
      RetentionInDays: 7

  CreateDataSourceLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-create-data-source-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/createDataSource
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Layers:
        - !Ref CommonLayer
        - !Ref DependenciesLayer
      Environment:
        Variables:
          NODE_PATH: "/opt/nodejs:/opt/nodejs/node_modules:/opt/common:/opt/dependencies"
          USER_TABLE_NAME: !Ref UserDetailsTable
          USER_CHATBOT_TABLE_NAME: !Ref UserChatBotTable
          KNOWLEDGE_BASE_TABLE_NAME: !Ref KnowledgeBaseTable
          TRANSFORM_DOCUMENTS_LAMBDA_ARN: !GetAtt TransformDocumentsLambda.Arn
          INTERMEDIATE_BUCKET_NAME: "intermediate-open-service"
          CHATBOT_TABLE_NAME: !Ref ChatbotTable
          BEDROCK_MODEL_ARN: "arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0"
          S3_BUCKET_NAME: "open-search-service"
          AWS_ACCOUNT_ID: !Ref AccountId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /data-source
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI

  CreateDataSourceLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-create-data-source-lambda"
      RetentionInDays: 7

  TransformDocumentsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-transform-documents-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/transformDocuments
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Layers:
        - !Ref CommonLayer
        - !Ref DependenciesLayer
      Environment:
        Variables:
          NODE_PATH: "/opt/nodejs:/opt/nodejs/node_modules:/opt/common:/opt/dependencies"
          S3_BUCKET_NAME: "open-search-service"

  TransformDocumentsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-transform-documents-lambda"
      RetentionInDays: 7

  ChatbotTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-chatbot-table"
      AttributeDefinitions:
        - AttributeName: chatBotId
          AttributeType: S
      KeySchema:
        - AttributeName: chatBotId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  KnowledgeBaseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-knowledge-base-table"
      AttributeDefinitions:
        - AttributeName: knowledgeBaseId
          AttributeType: S
        - AttributeName: createdBy
          AttributeType: S
      KeySchema:
        - AttributeName: knowledgeBaseId
          KeyType: HASH
        - AttributeName: createdBy
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  UserDetailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-user-details-table"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  UserChatBotTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-user-chatbot-table"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: chatBotId
          AttributeType: S
        - AttributeName: createdBy
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: chatBotId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: createdBy-index
          KeySchema:
            - AttributeName: createdBy
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 10
            WriteCapacityUnits: 10
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  IngestionJobTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-ingestion-job-table"
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
        - AttributeName: createdBy
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: createdBy-index
          KeySchema:
            - AttributeName: createdBy
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  KnowledgeBaseAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: !Sub "${StackName}-knowledgebase-api"
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub "https://${KnowledgeBaseAPI}.execute-api.${AWS::Region}.amazonaws.com/dev"
