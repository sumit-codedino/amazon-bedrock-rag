AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: RAG Application Infrastructure

Parameters:
  KnowledgeBaseId:
    Type: String
    Default: SAZ2XA7OUY
    Description: ID of the existing Bedrock Knowledge Base
  AccountId:
    Type: String
    Description: AWS Account ID
  KnowledgeBaseBucket:
    Type: String
    Default: arn:aws:s3:::open-search-service
    Description: S3 bucket ARN for the knowledge base
  StackName:
    Type: String
    Description: Stack Name

Resources:
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${StackName}-common-layer"
      Description: Common utilities and services for all Lambda functions
      ContentUri: ./layers/common
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${StackName}-dependencies-layer"
      Description: Dependencies layer for the Bedrock RAG project
      ContentUri: ./layers/dependencies
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete

  # Lambda Functions
  CreateWebDataSourceLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-create-web-data-source-lambda"
      Runtime: nodejs18.x
      Handler: index.handler
      CodeUri: ./lambda/dataSource
      Timeout: 60
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Events:
        CustomResource:
          Type: Api
          Properties:
            Path: /create-data-source
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:CreateDataSource
                - bedrock:UpdateDataSource
                - bedrock:DeleteDataSource
              Resource: "*"

  CreateWebDataSourceLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-create-web-data-source-lambda"
      RetentionInDays: 7

  IngestLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-ingest-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/ingest
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Environment:
        Variables:
          BUCKET_ARN: !Ref KnowledgeBaseBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /ingest
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI

  IngestLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-ingest-lambda"
      RetentionInDays: 7

  QueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-query-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/query
      Timeout: 29
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AccountId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /docs
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:RetrieveAndGenerate
                - bedrock:Retrieve
                - bedrock:InvokeModel
                - bedrock:GetInferenceProfile
              Resource: "*"

  QueryLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-query-lambda"
      RetentionInDays: 7

  ListDataSourcesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-list-data-sources-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/listDataSources
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /data-sources
            Method: get
            RestApiId: !Ref KnowledgeBaseAPI

  ListDataSourcesLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-list-data-sources-lambda"
      RetentionInDays: 7

  CreateChatBotLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-create-chat-bot-lambda"
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ./lambda/createChatBot
      Timeout: 900
      Role: !Sub "arn:aws:iam::${AccountId}:role/lambda-admin-role"
      Layers:
        - !Ref CommonLayer
        - !Ref DependenciesLayer
      Environment:
        Variables:
          NODE_PATH: "/opt/nodejs:/opt/nodejs/node_modules:/opt/common:/opt/dependencies"
          CHATBOT_TABLE_NAME: !Ref ChatbotTable
          KNOWLEDGE_BASE_ROLE_ARN: "arn:aws:iam::905418372486:role/service-role/AmazonBedrockExecutionRoleForKnowledgeBase_9umgz"
          EMBEDDING_MODEL_ARN: "arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /chatbot
            Method: post
            RestApiId: !Ref KnowledgeBaseAPI

  CreateChatBotLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StackName}-create-chat-bot-lambda"
      RetentionInDays: 7

  ChatbotTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-rag-chatbot-table"
      AttributeDefinitions:
        - AttributeName: chatBotId
          AttributeType: S
      KeySchema:
        - AttributeName: chatBotId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  KnowledgeBaseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-rag-knowledge-base-table"
      AttributeDefinitions:
        - AttributeName: knowledgeBaseId
          AttributeType: S
        - AttributeName: chatBotId
          AttributeType: S
      KeySchema:
        - AttributeName: knowledgeBaseId
          KeyType: HASH
        - AttributeName: chatBotId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  KnowledgeBaseAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: !Sub "${StackName}-knowledgebase-api"
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub "https://${KnowledgeBaseAPI}.execute-api.${AWS::Region}.amazonaws.com/dev"
