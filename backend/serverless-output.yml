AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: RAG Application Infrastructure
Parameters:
  KnowledgeBaseId:
    Type: String
    Default: SAZ2XA7OUY
    Description: ID of the existing Bedrock Knowledge Base
  AccountId:
    Type: String
    Description: AWS Account ID
  KnowledgeBaseBucket:
    Type: String
    Default: arn:aws:s3:::open-search-service
    Description: S3 bucket ARN for the knowledge base
Resources:
  S3DataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      Name: docs
      Description: S3 data source for document ingestion
      KnowledgeBaseId:
        Ref: KnowledgeBaseId
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn:
            Ref: KnowledgeBaseBucket
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 500
            OverlapPercentage: 20
    Metadata:
      SamResourceId: S3DataSource
  WebDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      Name: web-crawler
      Description: Web crawler data source
      KnowledgeBaseId:
        Ref: KnowledgeBaseId
      DataSourceConfiguration:
        Type: WEB
        WebConfiguration:
          CrawlerConfiguration:
            CrawlerLimits:
              MaxPages: 100
              RateLimit: 1
            ExclusionFilters:
            - .*\.pdf$
            - .*\.doc$
            - .*\.docx$
            InclusionFilters:
            - .*\.html$
            - .*\.htm$
            - .*\.txt$
            Scope: HOST_ONLY
          SourceConfiguration:
            UrlConfiguration:
              SeedUrls:
              - Url: https://example.com
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 500
            OverlapPercentage: 20
    Metadata:
      SamResourceId: WebDataSource
  CreateWebDataSourceLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-web-data-source-lambda
      Runtime: nodejs18.x
      Handler: index.handler
      CodeUri: s3://centexautotitle.net/rag/services/86ae6b3f640181f70210bd9a0afb5c2d
      Timeout: 60
      Role:
        Fn::Sub: arn:aws:iam::${AccountId}:role/lambda-admin-role
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Ref: KnowledgeBaseId
      Events:
        CustomResource:
          Type: Api
          Properties:
            Path: /create-data-source
            Method: post
            RestApiId:
              Ref: KnowledgeBaseAPI
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - bedrock:CreateDataSource
          - bedrock:UpdateDataSource
          - bedrock:DeleteDataSource
          Resource: '*'
    Metadata:
      SamResourceId: CreateWebDataSourceLambda
  CreateWebDataSourceLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CreateWebDataSourceLambda}
      RetentionInDays: 7
    Metadata:
      SamResourceId: CreateWebDataSourceLambdaLogGroup
  IngestLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ingest-lambda
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: s3://centexautotitle.net/rag/services/74dfd1ea85b72d45195a8b4e79e5fa68
      Timeout: 900
      Role:
        Fn::Sub: arn:aws:iam::${AccountId}:role/lambda-admin-role
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Ref: KnowledgeBaseId
          BUCKET_ARN:
            Ref: KnowledgeBaseBucket
    Metadata:
      SamResourceId: IngestLambda
  IngestLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${IngestLambda}
      RetentionInDays: 7
    Metadata:
      SamResourceId: IngestLambdaLogGroup
  IngestLambdaS3Event:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - IngestLambda
        - Arn
      Principal: s3.amazonaws.com
      SourceArn:
        Ref: KnowledgeBaseBucket
    Metadata:
      SamResourceId: IngestLambdaS3Event
  CrawlLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: crawl-lambda
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: s3://centexautotitle.net/rag/services/5948b2d70809e69fd3cd2f500e49b6f6
      Timeout: 900
      Role:
        Fn::Sub: arn:aws:iam::${AccountId}:role/lambda-admin-role
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Ref: KnowledgeBaseId
          DATA_SOURCE_ID:
            Fn::GetAtt:
            - WebDataSource
            - DataSourceId
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - bedrock:StartIngestionJob
          Resource: '*'
    Metadata:
      SamResourceId: CrawlLambda
  CrawlLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CrawlLambda}
      RetentionInDays: 7
    Metadata:
      SamResourceId: CrawlLambdaLogGroup
  UpdateWebUrlsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: update-web-urls-lambda
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: s3://centexautotitle.net/rag/services/c692a23658d43882e78e4e3fe8dbc0c8
      Timeout: 900
      Role:
        Fn::Sub: arn:aws:iam::${AccountId}:role/lambda-admin-role
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Ref: KnowledgeBaseId
          DATA_SOURCE_ID:
            Fn::GetAtt:
            - WebDataSource
            - DataSourceId
          DATA_SOURCE_NAME: WebCrawlerDataSource
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /web-urls
            Method: post
            RestApiId:
              Ref: KnowledgeBaseAPI
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - bedrock:GetDataSource
          - bedrock:UpdateDataSource
          Resource: '*'
    Metadata:
      SamResourceId: UpdateWebUrlsLambda
  UpdateWebUrlsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UpdateWebUrlsLambda}
      RetentionInDays: 7
    Metadata:
      SamResourceId: UpdateWebUrlsLambdaLogGroup
  GetWebUrlsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-web-urls-lambda
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: s3://centexautotitle.net/rag/services/ace800198b907f657b01d67eeb71c49b
      Timeout: 900
      Role:
        Fn::Sub: arn:aws:iam::${AccountId}:role/lambda-admin-role
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Ref: KnowledgeBaseId
          DATA_SOURCE_ID:
            Fn::GetAtt:
            - WebDataSource
            - DataSourceId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /urls
            Method: get
            RestApiId:
              Ref: KnowledgeBaseAPI
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - bedrock:GetDataSource
          Resource: '*'
    Metadata:
      SamResourceId: GetWebUrlsLambda
  GetWebUrlsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetWebUrlsLambda}
      RetentionInDays: 7
    Metadata:
      SamResourceId: GetWebUrlsLambdaLogGroup
  QueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: query-lambda
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: s3://centexautotitle.net/rag/services/123eb436c573da498833b0dc6cf14d8a
      Timeout: 29
      Role:
        Fn::Sub: arn:aws:iam::${AccountId}:role/lambda-admin-role
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Ref: KnowledgeBaseId
          ACCOUNT_ID:
            Ref: AccountId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /docs
            Method: post
            RestApiId:
              Ref: KnowledgeBaseAPI
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - bedrock:RetrieveAndGenerate
          - bedrock:Retrieve
          - bedrock:InvokeModel
          - bedrock:GetInferenceProfile
          Resource: '*'
    Metadata:
      SamResourceId: QueryLambda
  QueryLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${QueryLambda}
      RetentionInDays: 7
    Metadata:
      SamResourceId: QueryLambdaLogGroup
  ListDataSourcesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: list-data-sources-lambda
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: s3://centexautotitle.net/rag/services/f63b668755ed1a545dfde7900b5b4aef
      Timeout: 900
      Role:
        Fn::Sub: arn:aws:iam::${AccountId}:role/lambda-admin-role
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID:
            Ref: KnowledgeBaseId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /data-sources
            Method: get
            RestApiId:
              Ref: KnowledgeBaseAPI
    Metadata:
      SamResourceId: ListDataSourcesLambda
  ListDataSourcesLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ListDataSourcesLambda}
      RetentionInDays: 7
    Metadata:
      SamResourceId: ListDataSourcesLambdaLogGroup
  KnowledgeBaseAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: knowledgebase-api
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
    Metadata:
      SamResourceId: KnowledgeBaseAPI
Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value:
      Fn::Sub: https://${KnowledgeBaseAPI}.execute-api.${AWS::Region}.amazonaws.com/dev
